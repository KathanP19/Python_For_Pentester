import sys
import socket
import argparse
import re
#from concurrent.futures import ThreadPoolExecutor
import threading

options = argparse.ArgumentParser(description="Simple Port Scanner Made in Python", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
options.add_argument("-t","--target", required=True, help="Target to Scan")
options.add_argument("-th","--thread",type=int, required=False, help="Threads",const=10,nargs='?')
options.add_argument("-p","--port",type=str,required=False,help="Range of port to scan")
options.add_argument("-ti","--timeout", required=False, type=int, help="Set Timeout.", nargs='?')
args = options.parse_args()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
set_timeout = args.timeout
if set_timeout is not None:
    s.settimeout(set_timeout)
else:
    s.settimeout(3)

target = args.target
port = args.port
threads = args.thread
port_range_pattern = re.compile("([0-9]+)-([0-9]+)")
open_ports = []

if port is not None:
    port_range_valid = port_range_pattern.search(port.replace(" ",""))
    port_min=int(port_range_valid.group(1))
    port_max= int(port_range_valid.group(2))
else:
    port_min=0
    port_max=65535

try:
    socket.gethostbyname(target)
    ip = target
except socket.gaierror:
    print("Host cannot be resolved")
    sys.exit()

def port_scanner(ip,port):
        try:
            #print(ip,port)
            s.connect((ip, port))
            #return True
            open_ports.append(port)
        except:
            #return False
            pass

#to_scan_port = range(port_min, port_max +1)

#thread
def port_thread(ip,port_min,port_max):
    for port in range(port_min, port_max+1):
        threads = threading.Thread(target= port_scanner, args= (ip,port,))
        threads.start()

port_thread(ip,port_min,port_max)
#concurrency
#def port_fast(ip, to_scan_port):
#    with ThreadPoolExecutor(max_workers=threads) as executor:
#        results = executor.map(port_scanner, [ip]*len(to_scan_port), to_scan_port)
#        for to_scan_port,is_open in zip(to_scan_port,results):
#            if is_open:
#                open_ports.append(to_scan_port)

#port_fast(ip,to_scan_port)
for result_port in open_ports:
    print(f"{result_port} is open on {target}")
